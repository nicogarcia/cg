private string vertexShaderSource = @"
                    #version 150
                    //datos genericos
					uniform vec4 ka,ks,kd;
                    uniform float shininess;
                    uniform vec4 LightPosition;// se asume una fuente de luz blanca
                    uniform float rugosidad, indice;
                    uniform mat4 projection;
                    uniform mat4 modelview;
                    uniform mat4 modelviewN;
					//datos de entrada
                    in vec4 vPosition;
                    in vec4 Normal;
					//datos de salida
                    out vec4 color;
					//metodos
                    float OrenNayarReflectance(vec3 L, vec3 V, vec3 N){
						float A = 1 - (0.5f * (pow(rugosidad,2) / (pow(rugosidad,2)+0.33f)));
						float B = 0.45f * (pow(rugosidad,2) / (pow(rugosidad,2)+0.09f));
						float NdotL = dot(N,L), NdotV = dot(N,V), C = dot(L - NdotL*N,V - NdotV*N);
						float sinAlfa = sin(acos(min(NdotL,NdotV))), tgBeta = tan((acos(max(NdotL,NdotV))));
						return A + (B * C * sinAlfa * tgBeta);
					}
                    void main()
                    {
                        //computo el color del vertice
						float pf;
                        vec4 ambient = vec4(0), diffuse = vec4(0), specular = vec4(0);
                        vec3 N = normalize((modelviewN * Normal).xyz), L = normalize( LightPosition.xyz - (modelview  * vPosition).xyz);
                        vec3 E = - normalize((modelview * vPosition).xyz), H = normalize(L+E);
						float nDotH = max(dot(N,H),0.0);
						float nDotL = max(dot(N,L),0.0);
                        float Kd = max(dot(L,N),0.0);
						if(nDotL == 0)
							pf = 0;
						else
							pf = pow(nDotH, shininess);
                        ambient = ka;
                        diffuse = kd * nDotL * OrenNayarReflectance(L,E,N);
                        specular = ks * pf;
                        color = vec4((ambient +diffuse + specular).xyz,1.0);
						//computo la posicion del vertice en el espacio de clipping
						gl_Position = projection * modelview * vPosition;
                    }";
        private string fragmentShaderSource = @"
                    #version 150
                    out vec4 colorSalida;
                    in vec4 color;
                    void main()
                    {
                        colorSalida = color;
                    }";